{"name": "test_one", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"text-grey-800 cursor-pointer xxl:text-base xl:text-base lg:text-sm md:text-sm group-hover:text-white \" href=\"/phone-numbers/active-numbers\">...</a> is not clickable at point (325, 40). Other element would receive the click: <dialog class=\"rounded-xl animate-modalAnimation \" open=\"\">...</dialog>\n  (Session info: chrome=120.0.6099.225)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6AF002142+3514994]\n\t(No symbol) [0x00007FF6AEC20CE2]\n\t(No symbol) [0x00007FF6AEAC76AA]\n\t(No symbol) [0x00007FF6AEB188F3]\n\t(No symbol) [0x00007FF6AEB168ED]\n\t(No symbol) [0x00007FF6AEB140EC]\n\t(No symbol) [0x00007FF6AEB12EA5]\n\t(No symbol) [0x00007FF6AEB06A0F]\n\t(No symbol) [0x00007FF6AEB35FEA]\n\t(No symbol) [0x00007FF6AEB063B6]\n\t(No symbol) [0x00007FF6AEB36490]\n\t(No symbol) [0x00007FF6AEB528F6]\n\t(No symbol) [0x00007FF6AEB35D93]\n\t(No symbol) [0x00007FF6AEB04BDC]\n\t(No symbol) [0x00007FF6AEB05C64]\n\tGetHandleVerifier [0x00007FF6AF02E16B+3695259]\n\tGetHandleVerifier [0x00007FF6AF086737+4057191]\n\tGetHandleVerifier [0x00007FF6AF07E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6AED504F9+689705]\n\t(No symbol) [0x00007FF6AEC2C048]\n\t(No symbol) [0x00007FF6AEC28044]\n\t(No symbol) [0x00007FF6AEC281C9]\n\t(No symbol) [0x00007FF6AEC188C4]\n\tBaseThreadInitThunk [0x00007FFAF31D7344+20]\n\tRtlUserThreadStart [0x00007FFAF42A26B1+33]", "trace": "self = <testCases.test_phone.TestPhone object at 0x00000161BEC11840>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"232ac2a72a4659183885f878a2fde2d5\")>\n\n    def test_one(self, setup):\n        self.driver = setup\n        self.pp = PhonePage(self.driver)\n        self.tp = TeamPage(self.driver)\n        self.sp = SignInPage(self.driver)\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n        self.sp.send_phone(\"+234 878 685 8483\")\n        self.sp.send_password(\"Demo@1234\")\n        self.sp.click_sign_in_btn()\n        self.logger.info(\"__Successful login\")\n>       self.pp.click_heading()\n\ntestCases\\test_phone.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\phone_page.py:9: in click_heading\n    self.click_element(\"XPATH\", self.ppl.phone_heading_xpath)\npageObjects\\base_page.py:60: in click_element\n    element.click()\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000161BF5C3700>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6AEC188C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAF31D7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAF42A26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"text-grey-800 cursor-pointer xxl:text-base xl:text-base lg:text-sm md:text-sm group-hover:text-white \" href=\"/phone-numbers/active-numbers\">...</a> is not clickable at point (325, 40). Other element would receive the click: <dialog class=\"rounded-xl animate-modalAnimation \" open=\"\">...</dialog>\nE         (Session info: chrome=120.0.6099.225)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6AF002142+3514994]\nE       \t(No symbol) [0x00007FF6AEC20CE2]\nE       \t(No symbol) [0x00007FF6AEAC76AA]\nE       \t(No symbol) [0x00007FF6AEB188F3]\nE       \t(No symbol) [0x00007FF6AEB168ED]\nE       \t(No symbol) [0x00007FF6AEB140EC]\nE       \t(No symbol) [0x00007FF6AEB12EA5]\nE       \t(No symbol) [0x00007FF6AEB06A0F]\nE       \t(No symbol) [0x00007FF6AEB35FEA]\nE       \t(No symbol) [0x00007FF6AEB063B6]\nE       \t(No symbol) [0x00007FF6AEB36490]\nE       \t(No symbol) [0x00007FF6AEB528F6]\nE       \t(No symbol) [0x00007FF6AEB35D93]\nE       \t(No symbol) [0x00007FF6AEB04BDC]\nE       \t(No symbol) [0x00007FF6AEB05C64]\nE       \tGetHandleVerifier [0x00007FF6AF02E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6AF086737+4057191]\nE       \tGetHandleVerifier [0x00007FF6AF07E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6AED504F9+689705]\nE       \t(No symbol) [0x00007FF6AEC2C048]\nE       \t(No symbol) [0x00007FF6AEC28044]\nE       \t(No symbol) [0x00007FF6AEC281C9]\nE       \t(No symbol) [0x00007FF6AEC188C4]\nE       \tBaseThreadInitThunk [0x00007FFAF31D7344+20]\nE       \tRtlUserThreadStart [0x00007FFAF42A26B1+33]\n\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "4804bcbd-8674-42e4-b3a3-8efdae99d645-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "559338f4-418e-4753-9512-aadd3885a4b4-attachment.txt", "type": "text/plain"}], "start": 1706091229569, "stop": 1706091240487, "uuid": "5818f60f-e1a7-4ef4-9356-fcf88d29ccd5", "historyId": "7c5ef9df76f8e759e5a40d33c9ac0c95", "testCaseId": "7c5ef9df76f8e759e5a40d33c9ac0c95", "fullName": "testCases.test_phone.TestPhone#test_one", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_phone"}, {"name": "subSuite", "value": "TestPhone"}, {"name": "host", "value": "DESKTOP-KARQK2V"}, {"name": "thread", "value": "14544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_phone"}]}