{"name": "test_login_with_valid_credentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testCases.test_signin.TestSignIn object at 0x0000028FF1073B50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"99a72ae1ab9631635f911e244ea90c1c\")>\n\n    def test_login_with_valid_credentials(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.sp = SignInPage(self.driver)\n        self.sp.send_phone(\"+234 1234567890\")\n        self.sp.send_password('OhMG@123')\n        time.sleep(10)\n>       self.sp.click_sign_in_btn()\n\ntestCases\\test_signin.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\signin_page.py:53: in click_sign_in_btn\n    self.click_element('XPATH', self.spl.sign_in_button)\npageObjects\\base_page.py:57: in click_element\n    element = WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"99a72ae1ab9631635f911e244ea90c1c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000028FF9862CB0>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nlocal\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:101: TimeoutException"}, "start": 1706090531844, "stop": 1706090552905, "uuid": "fe3b1c5a-9ab3-4e31-bdb9-21b713b10e75", "historyId": "80d968d63db8f7d8f35a661587b3a586", "testCaseId": "80d968d63db8f7d8f35a661587b3a586", "fullName": "testCases.test_signin.TestSignIn#test_login_with_valid_credentials", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_signin"}, {"name": "subSuite", "value": "TestSignIn"}, {"name": "host", "value": "DESKTOP-KARQK2V"}, {"name": "thread", "value": "16024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_signin"}]}