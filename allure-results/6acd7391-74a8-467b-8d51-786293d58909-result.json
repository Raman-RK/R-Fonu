{"name": "test_one", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=120.0.6099.224); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF680402142+3514994]\n\t(No symbol) [0x00007FF680020CE2]\n\t(No symbol) [0x00007FF67FEC76AA]\n\t(No symbol) [0x00007FF67FECCFC0]\n\t(No symbol) [0x00007FF67FECF6F7]\n\t(No symbol) [0x00007FF67FF5316B]\n\t(No symbol) [0x00007FF67FF35FEA]\n\t(No symbol) [0x00007FF67FF528F6]\n\t(No symbol) [0x00007FF67FF35D93]\n\t(No symbol) [0x00007FF67FF04BDC]\n\t(No symbol) [0x00007FF67FF05C64]\n\tGetHandleVerifier [0x00007FF68042E16B+3695259]\n\tGetHandleVerifier [0x00007FF680486737+4057191]\n\tGetHandleVerifier [0x00007FF68047E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6801504F9+689705]\n\t(No symbol) [0x00007FF68002C048]\n\t(No symbol) [0x00007FF680028044]\n\t(No symbol) [0x00007FF6800281C9]\n\t(No symbol) [0x00007FF6800188C4]\n\tBaseThreadInitThunk [0x00007FFAF31D7344+20]\n\tRtlUserThreadStart [0x00007FFAF42A26B1+33]", "trace": "self = <testCases.test_phone.TestPhone object at 0x000001C154470B50>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0b29efd5b1242fc6f95a3ee0174f15c3\")>\n\n    def test_one(self, setup):\n        self.driver = setup\n        self.pp = PhonePage(self.driver)\n        self.tp = TeamPage(self.driver)\n        self.sp = SignInPage(self.driver)\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n        self.sp.send_phone(\"+234 1234567890\")\n        self.sp.send_password(\"OhMG@123\")\n        self.sp.click_sign_in_btn()\n        self.logger.info(\"__Successful login\")\n        self.pp.click_heading()\n        self.pp.click_three_dot_menu()\n>       self.pp.click_assign_to()\n\ntestCases\\test_phone.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\phone_page.py:18: in click_assign_to\n    self.click_element('XPATH', self.ppl.assign_to_xpath)\npageObjects\\base_page.py:57: in click_element\n    element = WebDriverWait(self.driver, timeout).until(\nlocal\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:92: in until\n    value = method(self._driver)\nlocal\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:356: in _predicate\n    element = visibility_of(target)(driver)\nlocal\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:167: in _predicate\n    return _element_if_visible(element)\nlocal\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:173: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:251: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C154C2B7F0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF6800188C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAF31D7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAF42A26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=120.0.6099.224); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF680402142+3514994]\nE       \t(No symbol) [0x00007FF680020CE2]\nE       \t(No symbol) [0x00007FF67FEC76AA]\nE       \t(No symbol) [0x00007FF67FECCFC0]\nE       \t(No symbol) [0x00007FF67FECF6F7]\nE       \t(No symbol) [0x00007FF67FF5316B]\nE       \t(No symbol) [0x00007FF67FF35FEA]\nE       \t(No symbol) [0x00007FF67FF528F6]\nE       \t(No symbol) [0x00007FF67FF35D93]\nE       \t(No symbol) [0x00007FF67FF04BDC]\nE       \t(No symbol) [0x00007FF67FF05C64]\nE       \tGetHandleVerifier [0x00007FF68042E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF680486737+4057191]\nE       \tGetHandleVerifier [0x00007FF68047E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6801504F9+689705]\nE       \t(No symbol) [0x00007FF68002C048]\nE       \t(No symbol) [0x00007FF680028044]\nE       \t(No symbol) [0x00007FF6800281C9]\nE       \t(No symbol) [0x00007FF6800188C4]\nE       \tBaseThreadInitThunk [0x00007FFAF31D7344+20]\nE       \tRtlUserThreadStart [0x00007FFAF42A26B1+33]\n\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "3ba9ab3c-7045-4ca3-8a91-ed77cc37721a-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a6d6bfe3-b721-4733-b1d1-ac88b5d373b8-attachment.txt", "type": "text/plain"}], "start": 1705663463223, "stop": 1705663472825, "uuid": "23d1e90c-1709-40c0-a63c-acd68a950eae", "historyId": "7c5ef9df76f8e759e5a40d33c9ac0c95", "testCaseId": "7c5ef9df76f8e759e5a40d33c9ac0c95", "fullName": "testCases.test_phone.TestPhone#test_one", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_phone"}, {"name": "subSuite", "value": "TestPhone"}, {"name": "host", "value": "DESKTOP-KARQK2V"}, {"name": "thread", "value": "18356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_phone"}]}