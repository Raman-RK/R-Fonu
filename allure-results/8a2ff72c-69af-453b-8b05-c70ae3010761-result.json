{"name": "test_create_empty_team", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"flex justify-center items-center bg-green h-10 text-white  xxl:text-base xl:text-sm lg:text-sm md:text-xs sm:text-xs xs:text-xs w-full rounded-md focus:ring focus:ring-green-200 focus:outline-none   disabled:bg-green-100 disabled:text-green-200 disabled:border-none disabled:cursor-no-drop   border green \">...</button> is not clickable at point (1060, 164). Other element would receive the click: <dialog class=\"rounded-xl animate-modalAnimation \" open=\"\">...</dialog>\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n\tGetHandleVerifier [0x00007FF63F732142+3514994]\n\t(No symbol) [0x00007FF63F350CE2]\n\t(No symbol) [0x00007FF63F1F76AA]\n\t(No symbol) [0x00007FF63F2488F3]\n\t(No symbol) [0x00007FF63F2468ED]\n\t(No symbol) [0x00007FF63F2440EC]\n\t(No symbol) [0x00007FF63F242EA5]\n\t(No symbol) [0x00007FF63F236A0F]\n\t(No symbol) [0x00007FF63F265FEA]\n\t(No symbol) [0x00007FF63F2363B6]\n\t(No symbol) [0x00007FF63F266490]\n\t(No symbol) [0x00007FF63F2828F6]\n\t(No symbol) [0x00007FF63F265D93]\n\t(No symbol) [0x00007FF63F234BDC]\n\t(No symbol) [0x00007FF63F235C64]\n\tGetHandleVerifier [0x00007FF63F75E16B+3695259]\n\tGetHandleVerifier [0x00007FF63F7B6737+4057191]\n\tGetHandleVerifier [0x00007FF63F7AE4E3+4023827]\n\tGetHandleVerifier [0x00007FF63F4804F9+689705]\n\t(No symbol) [0x00007FF63F35C048]\n\t(No symbol) [0x00007FF63F358044]\n\t(No symbol) [0x00007FF63F3581C9]\n\t(No symbol) [0x00007FF63F3488C4]\n\tBaseThreadInitThunk [0x00007FFAF31D7344+20]\n\tRtlUserThreadStart [0x00007FFAF42A26B1+33]", "trace": "self = <testCases.test_teams.TestTeam object at 0x000001C044CEE530>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1447c4e62081433a2e202dd1dfaa72c7\")>\n\n    @allure.feature('Create a Team')\n    @allure.feature('Verify that a team without a member is created successfully')\n    def test_create_empty_team(self, setup):\n        self.driver = setup\n        self.tp = TeamPage(self.driver)\n>       self.tp.click_create_team()\n\ntestCases\\test_teams.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\teams_page.py:59: in click_create_team\n    self.click_element('CSS_SELECTOR', self.tpl.create_team_btn_css)\npageObjects\\base_page.py:60: in click_element\n    element.click()\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C044D898A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF63F3488C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAF31D7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAF42A26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"flex justify-center items-center bg-green h-10 text-white  xxl:text-base xl:text-sm lg:text-sm md:text-xs sm:text-xs xs:text-xs w-full rounded-md focus:ring focus:ring-green-200 focus:outline-none   disabled:bg-green-100 disabled:text-green-200 disabled:border-none disabled:cursor-no-drop   border green \">...</button> is not clickable at point (1060, 164). Other element would receive the click: <dialog class=\"rounded-xl animate-modalAnimation \" open=\"\">...</dialog>\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63F732142+3514994]\nE       \t(No symbol) [0x00007FF63F350CE2]\nE       \t(No symbol) [0x00007FF63F1F76AA]\nE       \t(No symbol) [0x00007FF63F2488F3]\nE       \t(No symbol) [0x00007FF63F2468ED]\nE       \t(No symbol) [0x00007FF63F2440EC]\nE       \t(No symbol) [0x00007FF63F242EA5]\nE       \t(No symbol) [0x00007FF63F236A0F]\nE       \t(No symbol) [0x00007FF63F265FEA]\nE       \t(No symbol) [0x00007FF63F2363B6]\nE       \t(No symbol) [0x00007FF63F266490]\nE       \t(No symbol) [0x00007FF63F2828F6]\nE       \t(No symbol) [0x00007FF63F265D93]\nE       \t(No symbol) [0x00007FF63F234BDC]\nE       \t(No symbol) [0x00007FF63F235C64]\nE       \tGetHandleVerifier [0x00007FF63F75E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF63F7B6737+4057191]\nE       \tGetHandleVerifier [0x00007FF63F7AE4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF63F4804F9+689705]\nE       \t(No symbol) [0x00007FF63F35C048]\nE       \t(No symbol) [0x00007FF63F358044]\nE       \t(No symbol) [0x00007FF63F3581C9]\nE       \t(No symbol) [0x00007FF63F3488C4]\nE       \tBaseThreadInitThunk [0x00007FFAF31D7344+20]\nE       \tRtlUserThreadStart [0x00007FFAF42A26B1+33]\n\nlocal\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1705584715665, "stop": 1705584716792, "uuid": "43f3f6ca-a299-490d-862a-29afe2eb760c", "historyId": "32e685b28c5130ce90d1bed8e1c9bb9d", "testCaseId": "32e685b28c5130ce90d1bed8e1c9bb9d", "fullName": "testCases.test_teams.TestTeam#test_create_empty_team", "labels": [{"name": "feature", "value": "Verify that a team without a member is created successfully"}, {"name": "feature", "value": "Create a Team"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_teams"}, {"name": "subSuite", "value": "TestTeam"}, {"name": "host", "value": "DESKTOP-KARQK2V"}, {"name": "thread", "value": "1564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_teams"}]}